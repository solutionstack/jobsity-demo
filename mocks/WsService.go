// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	models "github.com/solutionstack/jobsity-demo/models"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// WsService is an autogenerated mock type for the WsService type
type WsService struct {
	mock.Mock
}

// GetMessages provides a mock function with given fields: roomName
func (_m *WsService) GetMessages(roomName string) ([]models.WsRoomMessage, error) {
	ret := _m.Called(roomName)

	var r0 []models.WsRoomMessage
	if rf, ok := ret.Get(0).(func(string) []models.WsRoomMessage); ok {
		r0 = rf(roomName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WsRoomMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomsList provides a mock function with given fields:
func (_m *WsService) GetRoomsList() ([]models.WsRoom, error) {
	ret := _m.Called()

	var r0 []models.WsRoom
	if rf, ok := ret.Get(0).(func() []models.WsRoom); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WsRoom)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields:
func (_m *WsService) GetUserList() ([]models.WsUsers, error) {
	ret := _m.Called()

	var r0 []models.WsUsers
	if rf, ok := ret.Get(0).(func() []models.WsUsers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WsUsers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMessage provides a mock function with given fields: roomName
func (_m *WsService) InsertMessage(roomName models.WsMessage) (models.WsRoomMessage, error) {
	ret := _m.Called(roomName)

	var r0 models.WsRoomMessage
	if rf, ok := ret.Get(0).(func(models.WsMessage) models.WsRoomMessage); ok {
		r0 = rf(roomName)
	} else {
		r0 = ret.Get(0).(models.WsRoomMessage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.WsMessage) error); ok {
		r1 = rf(roomName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetupDefaultConfig provides a mock function with given fields:
func (_m *WsService) SetupDefaultConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateUserSession provides a mock function with given fields: msg
func (_m *WsService) ValidateUserSession(msg models.WsMessage) bool {
	ret := _m.Called(msg)

	var r0 bool
	if rf, ok := ret.Get(0).(func(models.WsMessage) bool); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewWsService creates a new instance of WsService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewWsService(t testing.TB) *WsService {
	mock := &WsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
